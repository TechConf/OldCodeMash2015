<!--
Copyright (c) 1999-2002 by BEA Systems Inc. All Rights Reserved.

This is the DTD for the Web application deployment parameters that are
specific to the WebLogic server in WebLogic 8.1.0.

-->


<!-- 
The weblogic-web-app is the root element of the weblogic component of the
Web application deployment descriptor 
-->
<!ELEMENT weblogic-web-app (description?, weblogic-version?, 
          security-role-assignment*, run-as-role-assignment*, 
          reference-descriptor?, session-descriptor?, jsp-descriptor?, 
          auth-filter?, container-descriptor?, charset-params?, 
	  virtual-directory-mapping*, url-match-map?,
	  preprocessor*, preprocessor-mapping*,
          security-permission?, context-root?, 
          wl-dispatch-policy?, servlet-descriptor*,
          init-as*, destroy-as*)>

<!-- 
The description element is used to provide text describing the parent element.

Used in: weblogic-web-app
-->
<!ELEMENT description (#PCDATA)>


<!--
The weblogic-version specifies the version of WebLogic to which 
the weblogic-web-app applies.

Used in: weblogic-web-app
-->
<!ELEMENT weblogic-version (#PCDATA)>


<!--
The security-role-assigment declares a mapping between an WebApp security role
and one or more principals in the WebLogic server.

Example:
   <security-role-assignment>
     <role-name>PayrollAdmin</role-name>
     <principal-name>Tanya</principal-name>
     <principal-name>Fred</principal-name>
     <principal-name>system</principal-name>
   </security-role-assignment>

Example to mark a given role as a externally defined role 
(also known as global-role):
   <security-role-assignment>
     <role-name>roleadmin</role-name>
     <externally-defined/>
   </security-role-assignment>

Note: The global-role tag has been replaced with the externally-defined tag.

-->
<!ELEMENT security-role-assignment (role-name, principal-name*, 
externally-defined?, global-role?)>

<!--
run-as-role-assignment is used to map a given run-as role-name defined
in web.xml to a valid username in the system. The value can be
overridden for a given servlet by the run-as-principal-name element
in the servlet-descriptor. Note that if the run-as-role-assignment is
absent for a given rolename then the webapp container will choose
the first principal-name defined in the security-role-assignment,
if present, else will use the rolename as the run-as-role-assignment.

Example to specify a given principal ("joe") to be used for run-as
   <run-as-role-assignment>
     <role-name>RunAsRoleName</role-name>
     <run-as-principal-name>joe</run-as-principal-name>
   </run-as-role-assignment>

Used in: weblogic-web-app

Since: 8.1
-->
<!ELEMENT run-as-role-assignment (role-name, run-as-principal-name)>

<!--
The role-name element contains the name of a security role.

Used in: security-role-assignment
-->
<!ELEMENT role-name (#PCDATA)>

<!--
The principal-name element contains the name of a principal.

Used in: security-role-assignment
-->
<!ELEMENT principal-name (#PCDATA)>

<!--
DEPRECATED: The global-role element is now deprecated and will 
be removed in a future version of WebLogic. Please use the 
externally-defined element instead.

The global-role element indicates that a particular security role
is defined 'globally' in a security realm.  Because the security role
and it's principal-name mapping is defined elsewhere, principal-names
are not to be specified in the deployment descriptor.  This tag
is used as an indicative placeholder instead of a set of <principal-name> 
elements.

Used in: security-role-assignment

Since:  7.0SP01

-->
<!ELEMENT global-role EMPTY>

<!--
The externally-defined element indicates that a particular security role
is defined 'globally' in a security realm.  Because the security role
and it's principal-name mapping is defined elsewhere, principal-names
are not to be specified in the deployment descriptor.  This tag
is used as an indicative placeholder instead of a set of <principal-name> 
elements.

Used in: security-role-assignment

Since:  8.1
-->
<!ELEMENT externally-defined EMPTY>

<!--
The reference-descriptor specifies a list of resource-descriptions and 
the ejb-reference-description that describe the resources used in the application.

 Used in: weblogic-web-app

 Example:
     <reference-descriptor>
        <resource-description>
	  <res-ref-name>
	    jdbc/EmployeeAppDB
	  </res-ref-name>
	  <jndi-name>
	    weblogic.jdbc.jts.ejbPool
	  </jndi-name>
        </resource-description>
        <resource-description>
	  <res-ref-name>
	    jdbc/PersonDB
	  </res-ref-name>
	  <jndi-name>
	    weblogic.jdbc.jts.personPool
	  </jndi-name>
        </resource-description>
        <ejb-reference-description>
	  <ejb-ref-name>
	    AdminBean
	  </ejb-ref-name>
          <jndi-name>
	    payroll.AdminBean
          </jndi-name>
        </ejb-reference-description>
     </reference-descriptor>
-->
<!ELEMENT reference-descriptor (
  resource-description*,
  resource-env-description*,
  ejb-reference-description*
)>


<!--
The ejb-reference-description is used to map the JNDI name in the WebLogic 
server of an EJB that is referenced by the application in an ejb-reference.

 Used in: reference-descriptor

 Example:
     <ejb-reference-description>
	<ejb-ref-name>
	  AdminBean
	</ejb-ref-name>
        <jndi-name>
	  payroll.AdminBean
        </jndi-name>
     </ejb-reference-description>
-->
<!ELEMENT ejb-reference-description (ejb-ref-name, jndi-name)>


<!--
The ejb-ref-name element contains the name of an EJB reference. The
EJB reference is an entry in the enterprise bean's environment.

Used in: ejb-reference-description

Example: 
<ejb-ref-name>ejb/EmplRecords</ejb-ref-name>

-->
<!ELEMENT ejb-ref-name (#PCDATA)>


<!-- 
This specifies a jndi-name for a bean, resource or reference.

Used in: weblogic-enterprise-bean, reference-descriptor
-->
<!ELEMENT jndi-name (#PCDATA)>


<!--
By specifying virtual directory mappings you can change the 
default docroot for certain requests. virtual-directory-mapping 
defines a mapping between url pattern and a new doc root
-->
<!ELEMENT virtual-directory-mapping (local-path, url-pattern+)>

<!--
The local-path element specifies a physical location on the disk.
-->
<!ELEMENT local-path (#PCDATA)>

<!--
The url-pattern element contains the url pattern of the mapping. Must follow the rules specified in Section 11.2 of the Servlet API Specification.
-->
<!ELEMENT url-pattern (#PCDATA)>

<!--
Example:

  <virtual-directory-mapping>
     <local-path>c:/usr/gifs</local-path>
     <url-pattern>/images/*</url-pattern>
     <url-pattern>*.jpg</url-pattern>
  </virtual-directory-mapping>

  <virtual-directory-mapping>
     <local-path>c:/usr/jsps/common.jar</local-path>
     <url-pattern>*.jsp</url-pattern>
  </virtual-directory-mapping>
-->



<!--
The resource-description is used to map the JNDI name in the WebLogic 
server of a server resource that is used by a bean to an EJB resource 
reference.

 Used in: reference-descriptor

 Example:
     <resource-description>
	<res-ref-name>
	  jdbc/EmployeeAppDB
	</res-ref-name>
        <jndi-name>
	  weblogic.jdbc.jts.ejbPool
        </jndi-name>
     </resource-description>
-->
<!ELEMENT resource-description (res-ref-name, jndi-name)>

<!--
The res-env-ref-name element specifies the name of a resource environment
reference.

Used in: resource-env-description

-->
<!ELEMENT res-env-ref-name (#PCDATA)>

<!--
The res-ref-name element specifies the name of a resource factory
reference.

Used in: reference-descriptor

-->
<!ELEMENT res-ref-name (#PCDATA)>

<!--
The resource-env-description element is used to map a resource-env-ref,
declared in the ejb-jar.xml deployment descriptor, to the JNDI name of the 
server resource it represents.

 Used in: reference-descriptor

 Example:
     <resource-env-description>
	<res-env-ref-name>
	  jms/StockInfo
	</res-env-ref-name>
        <jndi-name>
	  mystockapp.jms.queue.nasdaq
        </jndi-name>
     </resource-description>
-->
<!ELEMENT resource-env-description (res-env-ref-name, jndi-name)>

<!--
The sesson-descriptor specifies a list of session-params
for servlet sessions.

 Used in: weblogic-web-app

 Example:
     <session-descriptor>
       <session-param>
         <param-name>
           FOO
         </param-name>
         <param-value>
           BAR
         </param-value>
       </session-param>
     </session-descriptor>

  Valid Param Names:
    CacheSize  // Used by jdbc/file based session persistence
               // default's to 256. Set to 0 in order to turn off
               // caching.
    ConsoleMainAttribute
    CookieComment
    CookieDomain
    CookieMaxAgeSecs
    CookieName
    CookiePath
    CookiesEnabled
    IDLength
    InvalidationIntervalSecs
    JDBCConnectionTimeoutSecs
    PersistentStoreCookieName
    PersistentStoreDir
    PersistentStorePool
    PersistentStoreType
    SwapIntervalSecs
    TimeoutSecs
    TrackingEnabled
    URLRewritingEnabled

-->
<!ELEMENT session-descriptor (
  session-param*
)>

<!--
The session-param is to define parameters for servlet sessions.

 Used in: session-descriptor

 Example:
      <session-param>
        <param-name>
          ConsoleMainAttribute
        </param-name>
        <param-value>
          MyMainAttribute
        </param-value>
      </session-param>
-->
<!ELEMENT session-param (param-name,param-value)>

<!--
The jsp-descriptor specifies a list of jsp-params
for servlet jsps.

 Used in: weblogic-web-app

 Example:
     <jsp-descriptor>
       <jsp-param>
         <param-name>
           verbose
         </param-name>
         <param-value>
           false
         </param-value>
       </jsp-param>
     </jsp-descriptor>

  Valid Param Names:
    compileCommand
    compileFlags
    compilerClass
    compilerSupportsEncoding
    defaultFilename
    encoding
    keepgenerated
    noTryBlocks
    packagePrefix
    pageCheckSeconds
    precompile
    verbose
    workingDir
    debug
    printNulls

-->
<!ELEMENT jsp-descriptor (
  jsp-param*
)>

<!--
The jsp-param is to define parameters for servlet jsps.

 Used in: jsp-descriptor

 Example:
      <jsp-param>
        <param-name>
          FOO
        </param-name>
        <param-value>
          BAR
        </param-value>
      </jsp-param>
-->
<!ELEMENT jsp-param (param-name,param-value)>

<!-- 
This specifies a param-name

Used in: session-param, jsp-param
-->
<!ELEMENT param-name (#PCDATA)>

<!-- 
This specifies a param-value

Used in: session-param, jsp-param
-->
<!ELEMENT param-value (#PCDATA)>

<!-- 
This specifies an authentication filter HttpServlet class
-->
<!ELEMENT auth-filter (#PCDATA)>

<!--
The container-descriptor specifies a list of parameters
that affect the behavior of the web application
Used in: weblogic-web-app
-->
<!ELEMENT container-descriptor (
  check-auth-on-forward?,
  filter-dispatched-requests-enabled?, 
  redirect-content-type?,
  redirect-content?,
  redirect-with-absolute-url?,
  index-directory-enabled?, 
  index-directory-sort-by?, 
  servlet-reload-check-secs?,
  single-threaded-servlet-pool-size?,
  session-monitoring-enabled?,
  save-sessions-enabled?,
  prefer-web-inf-classes?,
  default-mime-type?
)>

<!--
The check-auth-on-forward element, by its presence in a weblogic
deployment descriptor, indicates that the request dispatcher will
check authorization when a request is forwarded
-->
<!ELEMENT check-auth-on-forward EMPTY>


<!--
DEPRECATED: The redirect-content-type element is deprecated since 8.1
and will be removed in a future version of WebLogic.

If the redirect-content-type element is set, then
the servlet container will set that type on the response
for internal redirects (e.g., for welcome files).
-->
<!ELEMENT redirect-content-type (#PCDATA)>

<!--
DEPRECATED: The redirect-content element is deprecated since 8.1
and will be removed in a future version of WebLogic.

If the redirect-content element is set, then
the servlet container will use that as the
value for the user readable data used in a 
redirect.
-->
<!ELEMENT redirect-content (#PCDATA)>

<!--
If the redirect-with-absolute-url element is set to false, 
then the servlet container will not convert 
the relative url to the absolute url in the location 
header in a redirect.
-->
<!ELEMENT redirect-with-absolute-url (#PCDATA)>

<!--
Whether or not apply filters to dispatched requests
Defaults to "true". 
-->
<!ELEMENT filter-dispatched-requests-enabled (#PCDATA)>

<!--
Whether or not to automatically generate an HTML
directory listing if no suitable index file is found.
Defaults to "false". Value specified via console
will be given precedence over this setting.
-->
<!ELEMENT index-directory-enabled (#PCDATA)>

<!--
This element defines the order of sorting for the directory 
listing generated by weblogic.servlet.FileServlet. Valid values
are "NAME" (default), "LAST_MODIFIED" and "SIZE".
-->
<!ELEMENT index-directory-sort-by (#PCDATA)>

<!--
How often WebLogic checks whether a servlet has been
modified, and if so reloads it. -1 is never reload, 0 is 
always reload. Default to 1 second. Value specified via 
console will be given precedence over this setting.
-->
<!ELEMENT servlet-reload-check-secs (#PCDATA)>

<!--
Defines the size of the pool used for SingleThreadModle 
instance pools. Defaults to 5. Value specified via 
console will be given precedence over this setting.
-->
<!ELEMENT single-threaded-servlet-pool-size (#PCDATA)>

<!--
If true, then runtime mbeans will be created for sessions,
otherwise, they will not. Defaults to false. Value specified 
via console will be given precedence over this setting.
-->
<!ELEMENT session-monitoring-enabled (#PCDATA)>

<!--
If true, classes located in the WEB-INF directory of a 
web-app will be loaded in preference to classes loaded 
in the application or system classloader. Defaults to 
false. Value specified via console will be given 
precedence over this setting.
-->
<!ELEMENT prefer-web-inf-classes (#PCDATA)>

<!--
The charset-params element parameters related
do what codeset will be used for non-unicode
operations.
Used in: weblogic-web-app
-->
<!ELEMENT charset-params (input-charset*,charset-mapping*)>

<!--
The input-charset element defines what charset will be
used to process POST data for a particular resource
-->
<!ELEMENT input-charset (resource-path,java-charset-name)>

<!--
The charset-mapping element defines a mapping between
IANA names and Java names for charsets
-->
<!ELEMENT charset-mapping (iana-charset-name,java-charset-name)>

<!ELEMENT resource-path (#PCDATA)>
<!ELEMENT java-charset-name (#PCDATA)>
<!ELEMENT iana-charset-name (#PCDATA)>

<!--
Using url-match-map you can specify your own 
class for url pattern matching. By default
weblogic uses weblogic.servlet.utils.URLMatchMap, 
which is based on J2EE standards. So using 
url-match-map you could overide default behaviour or 
write your own url pattern matcher. The new class 
has to implement weblogic.servlet.utils.URLMapping
interface.
-->

<!ELEMENT url-match-map (#PCDATA)>


<!--
The preprocessor element contains the declarative data of a preprocessor.
 -->

<!ELEMENT preprocessor (preprocessor-name, preprocessor-class)>

<!--
The preprocessor-name element contains the canonical name of the preprocessor.
-->

<!ELEMENT preprocessor-name (#PCDATA)>


<!--
The preprocessor-class element contains the fully qualified class name of the preprocessor.
-->

<!ELEMENT preprocessor-class (#PCDATA)>

<!--
The preprocessor-mapping element defines a mapping between a preprocessor and a url pattern
-->

<!ELEMENT preprocessor-mapping (preprocessor-name, url-pattern)>

<!--
The element security permission specifies a security permission that
is associated with a J2EE Sandbox.

Used in: weblogic-web-app
-->
<!ELEMENT security-permission (description?, security-permission-spec)>


<!--
The element permission-spec specifies a single security permission based
on the Security policy file syntax. Refer to the following URL for
Sun's implementation of the security permission specification:

http://java.sun.com/j2se/1.3/docs/guide/security/PolicyFiles.html#FileSyntax

ignore the "codebase" and "signedBy" clauses.

e.g:
 <security-permission-spec>
    grant { permission java.net.SocketPermission "*", "resolve" };
 </security-permission-spec>

Used in: security-permission
-->
<!ELEMENT security-permission-spec (#PCDATA)>

<!--
The context root of this web application. This is useful for
standalone web applications. Normally, you would specify the
context-root in the META-INF/application.xml file of a J2EE
EAR, however, if this is a standalone web application, you
can specify the value here.

If this value is set, it takes precedence over the setting
in application.xml.
-->
<!ELEMENT context-root (#PCDATA)>

<!--
The wl-dispatch-policy can be used to assign the webapp to 
a configured execute queue by identifying the execute queue 
name. This webapp level param can be overridden at the 
individual servlet/jsp level by per-servlet-dispatch-policy.
-->
<!ELEMENT wl-dispatch-policy (#PCDATA)>

<!--
The servlet-descriptor aggregates the servlet specific
elements.

Since: 8.1
-->
<!ELEMENT servlet-descriptor (servlet-name, run-as-principal-name?, 
init-as-principal-name?, destroy-as-principal-name?, dispatch-policy?)>

<!--
servlet-name is the servlet-name as defined in web.xml's 
servlet element.

Used in: servlet-descriptor
-->
<!ELEMENT servlet-name (#PCDATA)>

<!--
The run-as-principal-name element contains the name of a principal
against the run-as role-name defined in web.xml.

Used in: run-as-role-assignment and servlet-descriptor
-->
<!ELEMENT run-as-principal-name (#PCDATA)>

<!--
init-as-principal-name is equivalent to run-as-principal-name 
for the init method for servlets. The identity specified here 
should be a valid username in the system. If init-as-principal-name
is not specified the container will use the run-as-principal-name.

Used in: servlet-descriptor
-->
<!ELEMENT init-as-principal-name (#PCDATA)>

<!--
destroy-as-principal-name is equivalent to run-as-principal-name 
for the destroy method for servlets. The identity specified here 
should be a valid username in the system. If destroy-as-principal-name
is not specified the container will use the run-as-principal-name.

Used in: servlet-descriptor
-->
<!ELEMENT destroy-as-principal-name (#PCDATA)>

<!--
The dispatch-policy element can be used to assign a given
servlet to a configured execute-queue by identifying the
execute queue name. This setting overrides the webapp
level dispatch policy defined by wl-dispatch-policy.

Used in: servlet-descriptor
-->
<!ELEMENT dispatch-policy (#PCDATA)>

<!--
DEPRECATED: The init-as element has been deprecated and has been
replaced with the init-as-principal-name tag in the servlet-descriptor.

This is equivalent to <run-as> for init method for servlets.
example:
  <init-as>
    <servlet-name>FooServlet</servlet-name>
    <principal-name>joe</principal-name>
  </init-as>

Since: 700sp1
-->
<!ELEMENT init-as (servlet-name, principal-name)>

<!--
DEPRECATED: The destroy-as element has been deprecated and has been
replaced with the destroy-as-principal-name tag in the servlet-descriptor.

This is equivalent to <run-as> for destroy method for servlets.
example:
  <destroy-as>
    <servlet-name>BarServlet</servlet-name>
    <principal-name>bob</principal-name>
  </destroy-as>

Since: 700sp1
-->
<!ELEMENT destroy-as (servlet-name, principal-name)>

<!--
The default mime type to be used for all extensions without 
an explicit Mime map in web.xml
-->
<!ELEMENT default-mime-type (#PCDATA)>

<!--
This setting controls whether session data is cleaned up during 
redeploy or undeploy. It affects memory and replicated sessions.
Setting the value to true means session data is saved. Setting to
false means session data will be destroyed when the web app is
redeployed or undeployed. The default is false.
-->
<!ELEMENT save-sessions-enabled (#PCDATA)> 
