<?xml version="1.0" encoding="UTF-8" ?>

<!--
    Document   : form
    Created on : June 18, 2003
    Author     : mjasnows
    Comment
        This stylesheet serves as the set of templates for layout and presentation
        formatting of HTML forms in the console.
-->


<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">


    <xsl:output method="html" encoding="UTF-8"/>

    <xsl:template match="text()"/>

    <!-- web context to use in path names -->
    <xsl:param name="web-context" select="default"/>

    <xsl:param name="field-required"/>

    <xsl:param name="server-restart-msg"/>

    <xsl:param name="app-redeploy-msg"/>
    
    <xsl:param name="inline-error-msg"/>

    <xsl:param name="locale"/>

    <xsl:param name="more-info-msg"/>

    <xsl:param name="link-opens-window"/>

    <!-- template rule matching source root element. This comes from the wl:form tag -->
    <xsl:template match="form">

       <!-- Include required fields msg here start -->
       <xsl:if test="count(//required)!=0">
         <div class="requiredfield"><xsl:value-of select="$field-required"/></div>
       </xsl:if>
       <!-- Include required fields msg here end -->

       <xsl:apply-templates select="script"/>

       <xsl:element name="form">
         <xsl:attribute name="name"><xsl:value-of select="@name"/></xsl:attribute>
         <xsl:attribute name="method"><xsl:value-of select="@method"/></xsl:attribute>
         <xsl:attribute name="action"><xsl:value-of select="@action"/></xsl:attribute>
         <xsl:attribute name="onsubmit"><xsl:value-of select="@onsubmit"/></xsl:attribute>
         <!-- REVIEW jsnyders: why no enctype attribute like assistant has -->

         <table class="formTable" summary="" datatable="0">
           <colgroup>
             <col class="labelCol" />
             <col class="inputCol" />
             <col class="helpCol" />
           </colgroup>

           <!-- These are all considered top-level elements and siblings of each other -->
           <xsl:apply-templates select="row|advancedseparatorrow|separator|inputfield[child::input/@type='hidden']|fieldgrouplabel|div|label|policy-editor|deployment-target"/>
         </table>
         <!-- These belong outside of the table -->
         <xsl:if test="formstate|form-owned">
         <div>
           <xsl:apply-templates select="formstate|form-owned"/>
         </div>
         </xsl:if>
       </xsl:element>

    </xsl:template>

    <!-- This prints out hidden fields for a form. Comes from the wl:form tag -->
    <xsl:template match="formstate">
      <xsl:copy-of select="*"/>
    </xsl:template>

    <!-- This prints out script to go after a form. Comes from the wl:form tag -->
    <xsl:template match="form-owned">
      <xsl:copy-of select="*"/>
    </xsl:template>

    <!-- Empty template for now -->
    <xsl:template match="required"/>

    <xsl:template match="script">
        <xsl:copy-of select="."/>
    </xsl:template>

    <!-- Process markup from the wl:advanced-form tag -->
    <xsl:template match="advancedseparatorrow">
      <xsl:copy-of select="*"/>
    </xsl:template>

    <!-- REVIEW jsnyders this should be a fieldset for accessability 
         but it probably can't span rows -->
    <!-- Process markup from the form-separator tag -->
    <xsl:template match="separator">
      <tr class="formSeparator"><td colspan="3">
        <h3><xsl:value-of select="@label" /></h3>
      </td></tr>
    </xsl:template>

    <!--

      Main Template that matches a row for a table in the form
 
      -->
    <xsl:template match="row">
     <xsl:if test="count(error)&gt;0">
       <tr class="errorinline">
         <td colspan="3"><img src="{$web-context}/images/error_status.gif" alt="{$inline-error-msg} "/><xsl:value-of select="error"/></td>
       </tr>
     </xsl:if>

     <xsl:variable name="rowClass">
      <xsl:if test="count(error)=0">
        <xsl:choose>
          <xsl:when test="count(preceding-sibling::row) mod 2 = 0">rowEven</xsl:when>
          <xsl:otherwise>rowOdd</xsl:otherwise>
        </xsl:choose>
      </xsl:if>
      <xsl:if test="count(error)&gt;0">rowError</xsl:if>
     </xsl:variable>

     <tr class="{$rowClass}" id="{concat(inputfield/*/@name,'_row')}">
      <xsl:apply-templates/>
     </tr>
    </xsl:template>

    <xsl:template match="inline-help">
      <td>
        <xsl:choose>
        <xsl:when test="@key!=''">
          <p class="wrapper">
          <span class="inlinehelp">
            <xsl:value-of select="."/>
          </span>
          <xsl:if test="string-length(normalize-space(.))&gt;0">
            <a title="{$link-opens-window}" href="#" onclick="javascript:return wls.console.launchAttributeHelp('{substring-before(@key,'.inlinehelp')}')">
               <xsl:value-of select="$more-info-msg"/><xsl:text>...</xsl:text>
            </a>
          </xsl:if>
          </p>
        </xsl:when>
        <xsl:otherwise>
           <xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text>
        </xsl:otherwise>
        </xsl:choose>
      </td>
    </xsl:template>

    <!--

       This template processes all input fields to put the actual field
       and value into the result tree

    -->
    <xsl:template match="inputfield">
      <xsl:choose>
      <xsl:when test="@readOnly or not(input[@type='checkbox' or @type='radio'])">
        <!-- Anything but a checkbox or radio button except do include read only 
        checkbox and radio buttons because they are presented like other read
        only controls -->

        <!-- Allow different style for readonly controls -->
        <xsl:variable name="tdclass">
          <xsl:choose>
          <xsl:when test="@readOnly">inputFieldRO</xsl:when>
          <xsl:otherwise>inputField</xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <td class="{$tdclass}"><div>
         <xsl:choose>
           <!-- readOnly is only present if set to true -->
           <xsl:when test="@readOnly">
             <!-- when read only take the value of inputs, textareas as is, and selected options -->
             <xsl:choose>
               <xsl:when test="textarea">
                   <xsl:copy-of select="textarea"/>
               </xsl:when>
               <xsl:otherwise>
                <xsl:choose>
                  <xsl:when test="ul">
                    <xsl:copy-of select="ul"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:choose>
                      <xsl:when test="ol">
                        <xsl:copy-of select="ol"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="input/@value|select/option[@selected='selected']/text()"/>
                      </xsl:otherwise>
                    </xsl:choose>
                   </xsl:otherwise>
                 </xsl:choose>
               </xsl:otherwise>
             </xsl:choose>
           </xsl:when>
           <xsl:otherwise>
             <xsl:copy-of select="input|textarea|select|script"/>
           </xsl:otherwise>
         </xsl:choose>
         <!-- Process output from field-button tag or from 'a' anchors -->
         <xsl:copy-of select="input-field-button/*|a"/>
        </div></td>
      </xsl:when>
      <xsl:otherwise>
        <!-- Else non read only checkbox or radio button -->
        <td colspan="2" class="labeledField">

          <xsl:copy-of select="input|a|script"/>

          <label for="{input/@id}">
            <xsl:call-template name="labelContent">
              <xsl:with-param name="value" select="preceding-sibling::fieldlabel/@value"/>
            </xsl:call-template>
          </label>
        </td>

      </xsl:otherwise>
      </xsl:choose>

    </xsl:template>

    <!-- A special case for wide input controls -->
    <xsl:template match="inputfield[textarea/@cols &gt; 30 or chooser]">

        <td class="inputField" colspan="2">
        <div>
          <xsl:choose>
            <xsl:when test="textarea/@id">
              <label for="{textarea/@id}">
                <xsl:call-template name="labelContent">
                  <xsl:with-param name="value"
                              select="concat(preceding-sibling::fieldlabel/@value, ':')"/>
                </xsl:call-template>
              </label>
            </xsl:when>
            <xsl:otherwise>
              <span class="likeLabel">
                <xsl:call-template name="labelContent">
                  <xsl:with-param name="value"
                              select="concat(preceding-sibling::fieldlabel/@value, ':')"/>
                </xsl:call-template>
              </span>
            </xsl:otherwise>
          </xsl:choose>
        </div>
        <div>
          <xsl:copy-of select="input|textarea|chooser/*|script"/>
          <!-- Process output from field-button tag or from 'a' anchors -->
          <xsl:copy-of select="input-field-button/*|a"/>
        </div></td>

    </xsl:template>

    <!--
      Render a label before a control. Special cases where a label
      is places above or after a control are handled elsewhere.
      The label may be wrapped in an errorlabel span. It may have restart
      icons before it. It may have a required field indication before it.
    -->
    <xsl:template match="fieldlabel">

      <!-- ignore the fieldlabel for special cases which are handled above -->
      <xsl:if test="(following-sibling::inputfield/@readOnly or 
                      not(following-sibling::inputfield/input[@type='radio' or @type='checkbox'])) and
                      not(following-sibling::inputfield[textarea/@cols &gt; 30]) and
                      not(following-sibling::inputfield[chooser])">
        <td>
          <!-- For read only controls which are rendered as static text, use a span
           otherwise use a label. This is for accessibility and to make sure the
           label always has a valid for attribute. -->
          <xsl:choose>
            <xsl:when test="not(following-sibling::inputfield/@readOnly) or following-sibling::inputfield/textarea">
              <label for="{following-sibling::inputfield/*/@id}">
	            <xsl:call-template name="labelContent">
	              <xsl:with-param name="value" select="concat(@value, ':')"/>
	            </xsl:call-template>
	          </label>
            </xsl:when>
            <xsl:otherwise>
              <span class="likeLabel">
	            <xsl:call-template name="labelContent">
	              <xsl:with-param name="value" select="concat(@value, ':')"/>
	            </xsl:call-template>
	          </span>
            </xsl:otherwise>
          </xsl:choose>
        </td>
      </xsl:if>

    </xsl:template>

    <!-- callable template to render label content. -->
    <xsl:template name="labelContent">
      <xsl:param name="value"/>
      <xsl:choose>
        <xsl:when test="../error != ''">
          <span class="errorlabel">
          <xsl:call-template name="labelIcons"/>
          <xsl:if test="preceding-sibling::required"><span class="requiredfield">*</span></xsl:if>
          <xsl:value-of select="$value"/></span>
        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="labelIcons"/>
          <xsl:if test="preceding-sibling::required"><span class="requiredfield">*</span></xsl:if>
          <xsl:value-of select="$value"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>

    <!-- callable template to put context icons before label text as needed.   -->
    <xsl:template name="labelIcons">
      <xsl:choose>
        <xsl:when test="../@restart">
          <img src="{$web-context}/images/serverrestart.gif" title="{$server-restart-msg}" alt="{$server-restart-msg} "/>
        </xsl:when>
        <xsl:when test="../@redeploy">
          <img src="{$web-context}/images/app_restart.gif" title="{$app-redeploy-msg}" alt="{$app-redeploy-msg} "/>
        </xsl:when>
      </xsl:choose>
    </xsl:template>

    <!-- A text label that introduces a related group of fields.  The
         body should specify the label text. -->
    <!-- REVIEW jsnyders for accessability this should be a fieldset but because
         forms are laid out in tables fieldset won't work. 
         Currently only used by ServerLoggingGeneralForm. 
         This is a construct not used elsewhere in the console UI so it might
         be worth considering removing it in favor of form-separator once it
         uses filedset. -->
    <xsl:template match="fieldgrouplabel">
      <tr class="fieldGroupLabel">
    	<td colspan="3">
    	  <h4><xsl:value-of select="."/>:</h4>
    	</td>
      </tr>
    </xsl:template>

    <xsl:template match="deployment-target">
      <tr><td colspan="2">
      <xsl:copy-of select="*"/>
      </td><td><xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text></td></tr>
    </xsl:template>

    <xsl:template match="policy-editor">
      <tr><td colspan="2">
      <xsl:copy-of select="*"/>
      </td><td><xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text></td></tr>
    </xsl:template>

    <!-- Pass through markup wrapped in a table cell -->
    <xsl:template match="div|label">
      <tr><td colspan="3">
      <xsl:copy-of select="."/>
      </td></tr>
    </xsl:template>

</xsl:stylesheet>
